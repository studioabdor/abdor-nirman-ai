# GitHub Actions Workflow for Deploying Next.js App to Firebase Hosting
#
# !!! IMPORTANT SETUP INSTRUCTIONS !!!
#
# 1. Firebase Project ID:
#    - Replace 'YOUR_FIREBASE_PROJECT_ID' in this file (in the `Deploy to Firebase Hosting` step)
#      with your actual Firebase project ID.
#    - Also, update 'YOUR_FIREBASE_PROJECT_ID' in the `.firebaserc` file in your project root.
#    - Alternatively, for better security and flexibility, you can set `projectId` in the workflow
#      as a GitHub secret (e.g., `secrets.FIREBASE_PROJECT_ID`) and reference it here.
#
# 2. Firebase Service Account Secret:
#    - Create a GitHub secret named `FIREBASE_SERVICE_ACCOUNT_NIRMAN_AI`.
#    - The value of this secret should be the JSON content of a Firebase service account key
#      with "Firebase Hosting Admin" role (or a role with sufficient permissions for deployment).
#    - To generate a service account key:
#      a. Go to your Firebase project settings > Service accounts.
#      b. Select "Node.js" and click "Generate new private key".
#      c. Copy the entire JSON content of the downloaded file into the GitHub secret.
#
# 3. Replicate API Key Secrets:
#    - This workflow passes several Replicate API keys as environment variables to the build process.
#    - You MUST create the following secrets in your GitHub repository settings:
#      - `MOODBOARD_RENDER_REPLICATE_API_KEY`
#      - `TEXT_TO_RENDER_REPLICATE_API_KEY`
#      - `ENHANCE_DETAILS_REPLICATE_API_KEY`
#      - `STYLE_SUGGESTION_REPLICATE_API_KEY`
#      - (Add any other Replicate API keys your project uses, e.g., for Sketch to Render)
#    - The values should be your actual Replicate API tokens.
#
# 4. Firebase CLI & Project Initialization (Local/Manual Steps if not done):
#    - Ensure you have the Firebase CLI installed (`npm install -g firebase-tools`).
#    - Log in to Firebase: `firebase login`.
#    - If you haven't initialized Firebase hosting for this project:
#      Run `firebase init hosting` in your project root.
#      When prompted, select your Firebase project.
#      It's crucial that Firebase detects this as a Next.js project for framework-aware hosting.
#      The `firebase.json` provided in this project is set up for this.
#
# 5. Deployment Branch:
#    - This workflow triggers on pushes to the `main` branch.
#    - Adjust the `on.push.branches` setting if your deployment branch is different (e.g., `master`, `deploy`).

name: Deploy to Firebase Hosting

on:
  push:
    branches:
      - main # Or your deployment branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your Node.js version

      - name: Install dependencies
        run: npm ci # Use npm ci for cleaner installs in CI

      - name: Build Next.js application
        run: npm run build
        env:
          # Pass Replicate API keys needed for the build process (e.g., if used in server components or API routes during build)
          # These might not be strictly necessary for `npm run build` if your app only uses them client-side or in runtime serverless functions,
          # but it's good practice to make them available if any pre-rendering or server component logic needs them.
          # For Genkit flows that are called during build time, these would be essential.
          MOODBOARD_RENDER_REPLICATE_API_KEY: ${{ secrets.MOODBOARD_RENDER_REPLICATE_API_KEY }}
          TEXT_TO_RENDER_REPLICATE_API_KEY: ${{ secrets.TEXT_TO_RENDER_REPLICATE_API_KEY }}
          ENHANCE_DETAILS_REPLICATE_API_KEY: ${{ secrets.ENHANCE_DETAILS_REPLICATE_API_KEY }}
          STYLE_SUGGESTION_REPLICATE_API_KEY: ${{ secrets.STYLE_SUGGESTION_REPLICATE_API_KEY }}
          # NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }} # Example if needed by build

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_NIRMAN_AI }}' # User needs to create this secret
          channelId: live # Deploy to the live channel
          projectId: 'YOUR_FIREBASE_PROJECT_ID' # Replace with actual Project ID or make it a secret
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels # Enable channel commands
          # Environment variables passed here are available to the Firebase CLI during deployment.
          # If your Next.js app needs runtime environment variables for its serverless functions (deployed by Firebase),
          # those need to be set up separately in Google Cloud Secret Manager and referenced in your function code or via Firebase function configuration.
          # The `frameworksBackend` integration often handles .env.local or similar for runtime, but verify for your specific needs.
          # For Replicate keys needed by Genkit flows at RUNTIME (when functions are invoked):
          # These should ideally be configured directly in the Google Cloud Function environment
          # or accessed via Secret Manager from within the function code for better security.
          # However, the Firebase CLI might pick up some .env files for framework-aware deploys.
          # The FirebaseExtended/action-hosting-deploy action itself doesn't directly set runtime env vars for your functions.
          # For this example, we assume the build step might inline some or that runtime config is handled elsewhere.
          # If Genkit flows are part of the serverless functions deployed by Firebase, they need access to these keys.
          # One way is to set them in the Cloud Function's environment variables via Firebase console or gcloud CLI.
          # Or, if your Genkit setup reads from `process.env` and these are available during the `firebase deploy` packaging, it might work.
          # Let's list them here for completeness, but emphasize runtime configuration for serverless functions.
          MOODBOARD_RENDER_REPLICATE_API_KEY: ${{ secrets.MOODBOARD_RENDER_REPLICATE_API_KEY }}
          TEXT_TO_RENDER_REPLICATE_API_KEY: ${{ secrets.TEXT_TO_RENDER_REPLICATE_API_KEY }}
          ENHANCE_DETAILS_REPLICATE_API_KEY: ${{ secrets.ENHANCE_DETAILS_REPLICATE_API_KEY }}
          STYLE_SUGGESTION_REPLICATE_API_KEY: ${{ secrets.STYLE_SUGGESTION_REPLICATE_API_KEY }}
          # Add any other environment variables needed for the build process here
          # e.g., SKETCH_TO_RENDER_REPLICATE_API_KEY: ${{ secrets.SKETCH_TO_RENDER_REPLICATE_API_KEY }}
          # All Replicate API keys should be set as secrets and passed here
          # Note: The above env block under `Deploy to Firebase Hosting` might be redundant if the build step correctly bundles env vars
          # or if runtime env vars are managed directly on Cloud Functions for Firebase.
          # However, some build processes or Firebase CLI plugins might use them.
          # The primary place for runtime secrets for Cloud Functions is Google Secret Manager or function-level environment variables.
